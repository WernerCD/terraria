#! /usr/bin/env python3
import os, sys, urllib.request, json, glob, shutil, datetime

#####
#
# This script updates the image configs with new verions
#
#####

#####
# Configuration
#####
limit = 1



# Change to script dir
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

# Change to root of repo
os.chdir('..')

# Store repo dir
repodir = os.getcwd()


#####
#  Parse User and Pass from cli
#####
token = ''
if len(sys.argv) > 1:
    if sys.argv[1] == 'help':
        print("You may pass in a Github token inprove API access, ie `"+sys.argv[0]+" token`")
        sys.exit()

    if sys.argv[1]:
        token = sys.argv[1]


print("\n")
print('#####')
print('# Get TShock Versions')
print('#####')

# Config
template_folder = repodir+'/template/tshock'
version_folder = repodir+'/containers/tshock'
version_list = []

# Get TShock Versions
try:
    url = "https://api.github.com/repos/Pryaxis/TShock/releases"
    req = urllib.request.Request(url)
    if token != '':
        req.add_header('Authorization', 'token '+token)
    r = urllib.request.urlopen(req)
    data = json.loads(r.read().decode('utf-8'))
except urllib.error.HTTPError as err:
    print(err.reason)
    sys.exit()

count = 0
gotprerelease = False
for item in data:
    if count == limit:
        break

    if (gotprerelease and item['prerelease']) or item['draft']:
        continue

    if gotprerelease == False:
        gotprerelease = True

    count += 1
    line = item['tag_name'].strip('v') + " " + item['assets'][0]['browser_download_url']
    version_list.append(line)

# Delete existing version folders
print('Deleting versions from: '+version_folder)
paths = glob.glob(version_folder+'/*/')
for path in paths:
    shutil.rmtree(path, False)

# Create new version folders
print('Creating new versions for: '+version_folder)
for item in version_list:
    # Split Version number and URL
    item = item.split()

    version = item[0]
    url = item[1]

    print(version)

    # Setup
    vfolder = version_folder+'/'+version
    vnumber = version

    # Copy template to new folder
    shutil.copytree(template_folder, vfolder)

    # Filter replace codes
    with open(vfolder+'/Dockerfile.template', 'r') as f:
        file_contents = f.read()

    file_contents = file_contents.replace('%%VERSION%%', vnumber)
    file_contents = file_contents.replace('%%DOWNLOAD_URL%%', url)

    with open(vfolder+'/Dockerfile','w') as f:
        f.write(file_contents)

    # Delete dockerfile.template
    os.remove(vfolder+'/Dockerfile.template')

# Update latest file
with open(version_folder+'/latest','w') as f:
    # Split Version number and URL
    item = version_list[0].split()

    latest = item[0]

    print("Updating latest to: "+latest)
    f.write(latest)


